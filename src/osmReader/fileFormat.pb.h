// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fileFormat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fileFormat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fileFormat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fileFormat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fileFormat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fileFormat_2eproto;
class Blob;
class BlobDefaultTypeInternal;
extern BlobDefaultTypeInternal _Blob_default_instance_;
class BlobHeader;
class BlobHeaderDefaultTypeInternal;
extern BlobHeaderDefaultTypeInternal _BlobHeader_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Blob* Arena::CreateMaybeMessage<::Blob>(Arena*);
template<> ::BlobHeader* Arena::CreateMaybeMessage<::BlobHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class BlobHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlobHeader) */ {
 public:
  inline BlobHeader() : BlobHeader(nullptr) {};
  virtual ~BlobHeader();

  BlobHeader(const BlobHeader& from);
  BlobHeader(BlobHeader&& from) noexcept
    : BlobHeader() {
    *this = ::std::move(from);
  }

  inline BlobHeader& operator=(const BlobHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlobHeader& operator=(BlobHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlobHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlobHeader* internal_default_instance() {
    return reinterpret_cast<const BlobHeader*>(
               &_BlobHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlobHeader& a, BlobHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(BlobHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlobHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlobHeader* New() const final {
    return CreateMaybeMessage<BlobHeader>(nullptr);
  }

  BlobHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlobHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlobHeader& from);
  void MergeFrom(const BlobHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlobHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlobHeader";
  }
  protected:
  explicit BlobHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fileFormat_2eproto);
    return ::descriptor_table_fileFormat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIndexdataFieldNumber = 2,
    kDatasizeFieldNumber = 3,
  };
  // required string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional bytes indexdata = 2;
  bool has_indexdata() const;
  private:
  bool _internal_has_indexdata() const;
  public:
  void clear_indexdata();
  const std::string& indexdata() const;
  void set_indexdata(const std::string& value);
  void set_indexdata(std::string&& value);
  void set_indexdata(const char* value);
  void set_indexdata(const void* value, size_t size);
  std::string* mutable_indexdata();
  std::string* release_indexdata();
  void set_allocated_indexdata(std::string* indexdata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_indexdata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_indexdata(
      std::string* indexdata);
  private:
  const std::string& _internal_indexdata() const;
  void _internal_set_indexdata(const std::string& value);
  std::string* _internal_mutable_indexdata();
  public:

  // required int32 datasize = 3;
  bool has_datasize() const;
  private:
  bool _internal_has_datasize() const;
  public:
  void clear_datasize();
  ::PROTOBUF_NAMESPACE_ID::int32 datasize() const;
  void set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_datasize() const;
  void _internal_set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BlobHeader)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr indexdata_;
  ::PROTOBUF_NAMESPACE_ID::int32 datasize_;
  friend struct ::TableStruct_fileFormat_2eproto;
};
// -------------------------------------------------------------------

class Blob PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Blob) */ {
 public:
  inline Blob() : Blob(nullptr) {};
  virtual ~Blob();

  Blob(const Blob& from);
  Blob(Blob&& from) noexcept
    : Blob() {
    *this = ::std::move(from);
  }

  inline Blob& operator=(const Blob& from) {
    CopyFrom(from);
    return *this;
  }
  inline Blob& operator=(Blob&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Blob& default_instance();

  enum DataCase {
    kRaw = 1,
    kZlibData = 3,
    kLzmaData = 4,
    kOBSOLETEBzip2Data = 5,
    kLz4Data = 6,
    kZstdData = 7,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Blob* internal_default_instance() {
    return reinterpret_cast<const Blob*>(
               &_Blob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Blob& a, Blob& b) {
    a.Swap(&b);
  }
  inline void Swap(Blob* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Blob* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Blob* New() const final {
    return CreateMaybeMessage<Blob>(nullptr);
  }

  Blob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Blob>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Blob& from);
  void MergeFrom(const Blob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Blob* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Blob";
  }
  protected:
  explicit Blob(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fileFormat_2eproto);
    return ::descriptor_table_fileFormat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawSizeFieldNumber = 2,
    kRawFieldNumber = 1,
    kZlibDataFieldNumber = 3,
    kLzmaDataFieldNumber = 4,
    kOBSOLETEBzip2DataFieldNumber = 5,
    kLz4DataFieldNumber = 6,
    kZstdDataFieldNumber = 7,
  };
  // optional int32 raw_size = 2;
  bool has_raw_size() const;
  private:
  bool _internal_has_raw_size() const;
  public:
  void clear_raw_size();
  ::PROTOBUF_NAMESPACE_ID::int32 raw_size() const;
  void set_raw_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_raw_size() const;
  void _internal_set_raw_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bytes raw = 1;
  bool has_raw() const;
  private:
  bool _internal_has_raw() const;
  public:
  void clear_raw();
  const std::string& raw() const;
  void set_raw(const std::string& value);
  void set_raw(std::string&& value);
  void set_raw(const char* value);
  void set_raw(const void* value, size_t size);
  std::string* mutable_raw();
  std::string* release_raw();
  void set_allocated_raw(std::string* raw);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_raw();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_raw(
      std::string* raw);
  private:
  const std::string& _internal_raw() const;
  void _internal_set_raw(const std::string& value);
  std::string* _internal_mutable_raw();
  public:

  // bytes zlib_data = 3;
  bool has_zlib_data() const;
  private:
  bool _internal_has_zlib_data() const;
  public:
  void clear_zlib_data();
  const std::string& zlib_data() const;
  void set_zlib_data(const std::string& value);
  void set_zlib_data(std::string&& value);
  void set_zlib_data(const char* value);
  void set_zlib_data(const void* value, size_t size);
  std::string* mutable_zlib_data();
  std::string* release_zlib_data();
  void set_allocated_zlib_data(std::string* zlib_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_zlib_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_zlib_data(
      std::string* zlib_data);
  private:
  const std::string& _internal_zlib_data() const;
  void _internal_set_zlib_data(const std::string& value);
  std::string* _internal_mutable_zlib_data();
  public:

  // bytes lzma_data = 4;
  bool has_lzma_data() const;
  private:
  bool _internal_has_lzma_data() const;
  public:
  void clear_lzma_data();
  const std::string& lzma_data() const;
  void set_lzma_data(const std::string& value);
  void set_lzma_data(std::string&& value);
  void set_lzma_data(const char* value);
  void set_lzma_data(const void* value, size_t size);
  std::string* mutable_lzma_data();
  std::string* release_lzma_data();
  void set_allocated_lzma_data(std::string* lzma_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_lzma_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_lzma_data(
      std::string* lzma_data);
  private:
  const std::string& _internal_lzma_data() const;
  void _internal_set_lzma_data(const std::string& value);
  std::string* _internal_mutable_lzma_data();
  public:

  // bytes OBSOLETE_bzip2_data = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_bzip2_data() const;
  private:
  bool _internal_has_obsolete_bzip2_data() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_bzip2_data();
  PROTOBUF_DEPRECATED const std::string& obsolete_bzip2_data() const;
  PROTOBUF_DEPRECATED void set_obsolete_bzip2_data(const std::string& value);
  PROTOBUF_DEPRECATED void set_obsolete_bzip2_data(std::string&& value);
  PROTOBUF_DEPRECATED void set_obsolete_bzip2_data(const char* value);
  PROTOBUF_DEPRECATED void set_obsolete_bzip2_data(const void* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_obsolete_bzip2_data();
  PROTOBUF_DEPRECATED std::string* release_obsolete_bzip2_data();
  PROTOBUF_DEPRECATED void set_allocated_obsolete_bzip2_data(std::string* obsolete_bzip2_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_obsolete_bzip2_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_obsolete_bzip2_data(
      std::string* obsolete_bzip2_data);
  private:
  const std::string& _internal_obsolete_bzip2_data() const;
  void _internal_set_obsolete_bzip2_data(const std::string& value);
  std::string* _internal_mutable_obsolete_bzip2_data();
  public:

  // bytes lz4_data = 6;
  bool has_lz4_data() const;
  private:
  bool _internal_has_lz4_data() const;
  public:
  void clear_lz4_data();
  const std::string& lz4_data() const;
  void set_lz4_data(const std::string& value);
  void set_lz4_data(std::string&& value);
  void set_lz4_data(const char* value);
  void set_lz4_data(const void* value, size_t size);
  std::string* mutable_lz4_data();
  std::string* release_lz4_data();
  void set_allocated_lz4_data(std::string* lz4_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_lz4_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_lz4_data(
      std::string* lz4_data);
  private:
  const std::string& _internal_lz4_data() const;
  void _internal_set_lz4_data(const std::string& value);
  std::string* _internal_mutable_lz4_data();
  public:

  // bytes zstd_data = 7;
  bool has_zstd_data() const;
  private:
  bool _internal_has_zstd_data() const;
  public:
  void clear_zstd_data();
  const std::string& zstd_data() const;
  void set_zstd_data(const std::string& value);
  void set_zstd_data(std::string&& value);
  void set_zstd_data(const char* value);
  void set_zstd_data(const void* value, size_t size);
  std::string* mutable_zstd_data();
  std::string* release_zstd_data();
  void set_allocated_zstd_data(std::string* zstd_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_zstd_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_zstd_data(
      std::string* zstd_data);
  private:
  const std::string& _internal_zstd_data() const;
  void _internal_set_zstd_data(const std::string& value);
  std::string* _internal_mutable_zstd_data();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:Blob)
 private:
  class _Internal;
  void set_has_raw();
  void set_has_zlib_data();
  void set_has_lzma_data();
  void set_has_obsolete_bzip2_data();
  void set_has_lz4_data();
  void set_has_zstd_data();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 raw_size_;
  union DataUnion {
    DataUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zlib_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lzma_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsolete_bzip2_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lz4_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zstd_data_;
  } data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_fileFormat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlobHeader

// required string type = 1;
inline bool BlobHeader::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BlobHeader::has_type() const {
  return _internal_has_type();
}
inline void BlobHeader::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlobHeader::type() const {
  // @@protoc_insertion_point(field_get:BlobHeader.type)
  return _internal_type();
}
inline void BlobHeader::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BlobHeader.type)
}
inline std::string* BlobHeader::mutable_type() {
  // @@protoc_insertion_point(field_mutable:BlobHeader.type)
  return _internal_mutable_type();
}
inline const std::string& BlobHeader::_internal_type() const {
  return type_.Get();
}
inline void BlobHeader::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlobHeader::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BlobHeader.type)
}
inline void BlobHeader::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BlobHeader.type)
}
inline void BlobHeader::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BlobHeader.type)
}
inline std::string* BlobHeader::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlobHeader::release_type() {
  // @@protoc_insertion_point(field_release:BlobHeader.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlobHeader::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BlobHeader.type)
}
inline std::string* BlobHeader::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BlobHeader.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BlobHeader::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BlobHeader.type)
}

// optional bytes indexdata = 2;
inline bool BlobHeader::_internal_has_indexdata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BlobHeader::has_indexdata() const {
  return _internal_has_indexdata();
}
inline void BlobHeader::clear_indexdata() {
  indexdata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlobHeader::indexdata() const {
  // @@protoc_insertion_point(field_get:BlobHeader.indexdata)
  return _internal_indexdata();
}
inline void BlobHeader::set_indexdata(const std::string& value) {
  _internal_set_indexdata(value);
  // @@protoc_insertion_point(field_set:BlobHeader.indexdata)
}
inline std::string* BlobHeader::mutable_indexdata() {
  // @@protoc_insertion_point(field_mutable:BlobHeader.indexdata)
  return _internal_mutable_indexdata();
}
inline const std::string& BlobHeader::_internal_indexdata() const {
  return indexdata_.Get();
}
inline void BlobHeader::_internal_set_indexdata(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  indexdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlobHeader::set_indexdata(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  indexdata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BlobHeader.indexdata)
}
inline void BlobHeader::set_indexdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  indexdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BlobHeader.indexdata)
}
inline void BlobHeader::set_indexdata(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  indexdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BlobHeader.indexdata)
}
inline std::string* BlobHeader::_internal_mutable_indexdata() {
  _has_bits_[0] |= 0x00000002u;
  return indexdata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlobHeader::release_indexdata() {
  // @@protoc_insertion_point(field_release:BlobHeader.indexdata)
  if (!_internal_has_indexdata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return indexdata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlobHeader::set_allocated_indexdata(std::string* indexdata) {
  if (indexdata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  indexdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), indexdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BlobHeader.indexdata)
}
inline std::string* BlobHeader::unsafe_arena_release_indexdata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BlobHeader.indexdata)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return indexdata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BlobHeader::unsafe_arena_set_allocated_indexdata(
    std::string* indexdata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (indexdata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  indexdata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      indexdata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BlobHeader.indexdata)
}

// required int32 datasize = 3;
inline bool BlobHeader::_internal_has_datasize() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BlobHeader::has_datasize() const {
  return _internal_has_datasize();
}
inline void BlobHeader::clear_datasize() {
  datasize_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobHeader::_internal_datasize() const {
  return datasize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlobHeader::datasize() const {
  // @@protoc_insertion_point(field_get:BlobHeader.datasize)
  return _internal_datasize();
}
inline void BlobHeader::_internal_set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  datasize_ = value;
}
inline void BlobHeader::set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:BlobHeader.datasize)
}

// -------------------------------------------------------------------

// Blob

// optional int32 raw_size = 2;
inline bool Blob::_internal_has_raw_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Blob::has_raw_size() const {
  return _internal_has_raw_size();
}
inline void Blob::clear_raw_size() {
  raw_size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Blob::_internal_raw_size() const {
  return raw_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Blob::raw_size() const {
  // @@protoc_insertion_point(field_get:Blob.raw_size)
  return _internal_raw_size();
}
inline void Blob::_internal_set_raw_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  raw_size_ = value;
}
inline void Blob::set_raw_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_raw_size(value);
  // @@protoc_insertion_point(field_set:Blob.raw_size)
}

// bytes raw = 1;
inline bool Blob::_internal_has_raw() const {
  return data_case() == kRaw;
}
inline bool Blob::has_raw() const {
  return _internal_has_raw();
}
inline void Blob::set_has_raw() {
  _oneof_case_[0] = kRaw;
}
inline void Blob::clear_raw() {
  if (_internal_has_raw()) {
    data_.raw_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_data();
  }
}
inline const std::string& Blob::raw() const {
  // @@protoc_insertion_point(field_get:Blob.raw)
  return _internal_raw();
}
inline void Blob::set_raw(const std::string& value) {
  _internal_set_raw(value);
  // @@protoc_insertion_point(field_set:Blob.raw)
}
inline std::string* Blob::mutable_raw() {
  // @@protoc_insertion_point(field_mutable:Blob.raw)
  return _internal_mutable_raw();
}
inline const std::string& Blob::_internal_raw() const {
  if (_internal_has_raw()) {
    return data_.raw_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Blob::_internal_set_raw(const std::string& value) {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.raw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Blob::set_raw(std::string&& value) {
  // @@protoc_insertion_point(field_set:Blob.raw)
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.raw_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Blob.raw)
}
inline void Blob::set_raw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.raw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Blob.raw)
}
inline void Blob::set_raw(const void* value,
                             size_t size) {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.raw_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:Blob.raw)
}
inline std::string* Blob::_internal_mutable_raw() {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.raw_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Blob::release_raw() {
  // @@protoc_insertion_point(field_release:Blob.raw)
  if (_internal_has_raw()) {
    clear_has_data();
    return data_.raw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Blob::set_allocated_raw(std::string* raw) {
  if (has_data()) {
    clear_data();
  }
  if (raw != nullptr) {
    set_has_raw();
    data_.raw_.UnsafeSetDefault(raw);
  }
  // @@protoc_insertion_point(field_set_allocated:Blob.raw)
}
inline std::string* Blob::unsafe_arena_release_raw() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Blob.raw)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_raw()) {
    clear_has_data();
    return data_.raw_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Blob::unsafe_arena_set_allocated_raw(std::string* raw) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_raw()) {
    data_.raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (raw) {
    set_has_raw();
    data_.raw_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Blob.raw)
}

// bytes zlib_data = 3;
inline bool Blob::_internal_has_zlib_data() const {
  return data_case() == kZlibData;
}
inline bool Blob::has_zlib_data() const {
  return _internal_has_zlib_data();
}
inline void Blob::set_has_zlib_data() {
  _oneof_case_[0] = kZlibData;
}
inline void Blob::clear_zlib_data() {
  if (_internal_has_zlib_data()) {
    data_.zlib_data_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_data();
  }
}
inline const std::string& Blob::zlib_data() const {
  // @@protoc_insertion_point(field_get:Blob.zlib_data)
  return _internal_zlib_data();
}
inline void Blob::set_zlib_data(const std::string& value) {
  _internal_set_zlib_data(value);
  // @@protoc_insertion_point(field_set:Blob.zlib_data)
}
inline std::string* Blob::mutable_zlib_data() {
  // @@protoc_insertion_point(field_mutable:Blob.zlib_data)
  return _internal_mutable_zlib_data();
}
inline const std::string& Blob::_internal_zlib_data() const {
  if (_internal_has_zlib_data()) {
    return data_.zlib_data_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Blob::_internal_set_zlib_data(const std::string& value) {
  if (!_internal_has_zlib_data()) {
    clear_data();
    set_has_zlib_data();
    data_.zlib_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.zlib_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Blob::set_zlib_data(std::string&& value) {
  // @@protoc_insertion_point(field_set:Blob.zlib_data)
  if (!_internal_has_zlib_data()) {
    clear_data();
    set_has_zlib_data();
    data_.zlib_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.zlib_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Blob.zlib_data)
}
inline void Blob::set_zlib_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_zlib_data()) {
    clear_data();
    set_has_zlib_data();
    data_.zlib_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.zlib_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Blob.zlib_data)
}
inline void Blob::set_zlib_data(const void* value,
                             size_t size) {
  if (!_internal_has_zlib_data()) {
    clear_data();
    set_has_zlib_data();
    data_.zlib_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.zlib_data_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:Blob.zlib_data)
}
inline std::string* Blob::_internal_mutable_zlib_data() {
  if (!_internal_has_zlib_data()) {
    clear_data();
    set_has_zlib_data();
    data_.zlib_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.zlib_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Blob::release_zlib_data() {
  // @@protoc_insertion_point(field_release:Blob.zlib_data)
  if (_internal_has_zlib_data()) {
    clear_has_data();
    return data_.zlib_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Blob::set_allocated_zlib_data(std::string* zlib_data) {
  if (has_data()) {
    clear_data();
  }
  if (zlib_data != nullptr) {
    set_has_zlib_data();
    data_.zlib_data_.UnsafeSetDefault(zlib_data);
  }
  // @@protoc_insertion_point(field_set_allocated:Blob.zlib_data)
}
inline std::string* Blob::unsafe_arena_release_zlib_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Blob.zlib_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_zlib_data()) {
    clear_has_data();
    return data_.zlib_data_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Blob::unsafe_arena_set_allocated_zlib_data(std::string* zlib_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_zlib_data()) {
    data_.zlib_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (zlib_data) {
    set_has_zlib_data();
    data_.zlib_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zlib_data, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Blob.zlib_data)
}

// bytes lzma_data = 4;
inline bool Blob::_internal_has_lzma_data() const {
  return data_case() == kLzmaData;
}
inline bool Blob::has_lzma_data() const {
  return _internal_has_lzma_data();
}
inline void Blob::set_has_lzma_data() {
  _oneof_case_[0] = kLzmaData;
}
inline void Blob::clear_lzma_data() {
  if (_internal_has_lzma_data()) {
    data_.lzma_data_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_data();
  }
}
inline const std::string& Blob::lzma_data() const {
  // @@protoc_insertion_point(field_get:Blob.lzma_data)
  return _internal_lzma_data();
}
inline void Blob::set_lzma_data(const std::string& value) {
  _internal_set_lzma_data(value);
  // @@protoc_insertion_point(field_set:Blob.lzma_data)
}
inline std::string* Blob::mutable_lzma_data() {
  // @@protoc_insertion_point(field_mutable:Blob.lzma_data)
  return _internal_mutable_lzma_data();
}
inline const std::string& Blob::_internal_lzma_data() const {
  if (_internal_has_lzma_data()) {
    return data_.lzma_data_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Blob::_internal_set_lzma_data(const std::string& value) {
  if (!_internal_has_lzma_data()) {
    clear_data();
    set_has_lzma_data();
    data_.lzma_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.lzma_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Blob::set_lzma_data(std::string&& value) {
  // @@protoc_insertion_point(field_set:Blob.lzma_data)
  if (!_internal_has_lzma_data()) {
    clear_data();
    set_has_lzma_data();
    data_.lzma_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.lzma_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Blob.lzma_data)
}
inline void Blob::set_lzma_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_lzma_data()) {
    clear_data();
    set_has_lzma_data();
    data_.lzma_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.lzma_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Blob.lzma_data)
}
inline void Blob::set_lzma_data(const void* value,
                             size_t size) {
  if (!_internal_has_lzma_data()) {
    clear_data();
    set_has_lzma_data();
    data_.lzma_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.lzma_data_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:Blob.lzma_data)
}
inline std::string* Blob::_internal_mutable_lzma_data() {
  if (!_internal_has_lzma_data()) {
    clear_data();
    set_has_lzma_data();
    data_.lzma_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.lzma_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Blob::release_lzma_data() {
  // @@protoc_insertion_point(field_release:Blob.lzma_data)
  if (_internal_has_lzma_data()) {
    clear_has_data();
    return data_.lzma_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Blob::set_allocated_lzma_data(std::string* lzma_data) {
  if (has_data()) {
    clear_data();
  }
  if (lzma_data != nullptr) {
    set_has_lzma_data();
    data_.lzma_data_.UnsafeSetDefault(lzma_data);
  }
  // @@protoc_insertion_point(field_set_allocated:Blob.lzma_data)
}
inline std::string* Blob::unsafe_arena_release_lzma_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Blob.lzma_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_lzma_data()) {
    clear_has_data();
    return data_.lzma_data_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Blob::unsafe_arena_set_allocated_lzma_data(std::string* lzma_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_lzma_data()) {
    data_.lzma_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (lzma_data) {
    set_has_lzma_data();
    data_.lzma_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lzma_data, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Blob.lzma_data)
}

// bytes OBSOLETE_bzip2_data = 5 [deprecated = true];
inline bool Blob::_internal_has_obsolete_bzip2_data() const {
  return data_case() == kOBSOLETEBzip2Data;
}
inline bool Blob::has_obsolete_bzip2_data() const {
  return _internal_has_obsolete_bzip2_data();
}
inline void Blob::set_has_obsolete_bzip2_data() {
  _oneof_case_[0] = kOBSOLETEBzip2Data;
}
inline void Blob::clear_obsolete_bzip2_data() {
  if (_internal_has_obsolete_bzip2_data()) {
    data_.obsolete_bzip2_data_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_data();
  }
}
inline const std::string& Blob::obsolete_bzip2_data() const {
  // @@protoc_insertion_point(field_get:Blob.OBSOLETE_bzip2_data)
  return _internal_obsolete_bzip2_data();
}
inline void Blob::set_obsolete_bzip2_data(const std::string& value) {
  _internal_set_obsolete_bzip2_data(value);
  // @@protoc_insertion_point(field_set:Blob.OBSOLETE_bzip2_data)
}
inline std::string* Blob::mutable_obsolete_bzip2_data() {
  // @@protoc_insertion_point(field_mutable:Blob.OBSOLETE_bzip2_data)
  return _internal_mutable_obsolete_bzip2_data();
}
inline const std::string& Blob::_internal_obsolete_bzip2_data() const {
  if (_internal_has_obsolete_bzip2_data()) {
    return data_.obsolete_bzip2_data_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Blob::_internal_set_obsolete_bzip2_data(const std::string& value) {
  if (!_internal_has_obsolete_bzip2_data()) {
    clear_data();
    set_has_obsolete_bzip2_data();
    data_.obsolete_bzip2_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.obsolete_bzip2_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Blob::set_obsolete_bzip2_data(std::string&& value) {
  // @@protoc_insertion_point(field_set:Blob.OBSOLETE_bzip2_data)
  if (!_internal_has_obsolete_bzip2_data()) {
    clear_data();
    set_has_obsolete_bzip2_data();
    data_.obsolete_bzip2_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.obsolete_bzip2_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Blob.OBSOLETE_bzip2_data)
}
inline void Blob::set_obsolete_bzip2_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_obsolete_bzip2_data()) {
    clear_data();
    set_has_obsolete_bzip2_data();
    data_.obsolete_bzip2_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.obsolete_bzip2_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Blob.OBSOLETE_bzip2_data)
}
inline void Blob::set_obsolete_bzip2_data(const void* value,
                             size_t size) {
  if (!_internal_has_obsolete_bzip2_data()) {
    clear_data();
    set_has_obsolete_bzip2_data();
    data_.obsolete_bzip2_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.obsolete_bzip2_data_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:Blob.OBSOLETE_bzip2_data)
}
inline std::string* Blob::_internal_mutable_obsolete_bzip2_data() {
  if (!_internal_has_obsolete_bzip2_data()) {
    clear_data();
    set_has_obsolete_bzip2_data();
    data_.obsolete_bzip2_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.obsolete_bzip2_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Blob::release_obsolete_bzip2_data() {
  // @@protoc_insertion_point(field_release:Blob.OBSOLETE_bzip2_data)
  if (_internal_has_obsolete_bzip2_data()) {
    clear_has_data();
    return data_.obsolete_bzip2_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Blob::set_allocated_obsolete_bzip2_data(std::string* obsolete_bzip2_data) {
  if (has_data()) {
    clear_data();
  }
  if (obsolete_bzip2_data != nullptr) {
    set_has_obsolete_bzip2_data();
    data_.obsolete_bzip2_data_.UnsafeSetDefault(obsolete_bzip2_data);
  }
  // @@protoc_insertion_point(field_set_allocated:Blob.OBSOLETE_bzip2_data)
}
inline std::string* Blob::unsafe_arena_release_obsolete_bzip2_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Blob.OBSOLETE_bzip2_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_obsolete_bzip2_data()) {
    clear_has_data();
    return data_.obsolete_bzip2_data_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Blob::unsafe_arena_set_allocated_obsolete_bzip2_data(std::string* obsolete_bzip2_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_obsolete_bzip2_data()) {
    data_.obsolete_bzip2_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (obsolete_bzip2_data) {
    set_has_obsolete_bzip2_data();
    data_.obsolete_bzip2_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obsolete_bzip2_data, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Blob.OBSOLETE_bzip2_data)
}

// bytes lz4_data = 6;
inline bool Blob::_internal_has_lz4_data() const {
  return data_case() == kLz4Data;
}
inline bool Blob::has_lz4_data() const {
  return _internal_has_lz4_data();
}
inline void Blob::set_has_lz4_data() {
  _oneof_case_[0] = kLz4Data;
}
inline void Blob::clear_lz4_data() {
  if (_internal_has_lz4_data()) {
    data_.lz4_data_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_data();
  }
}
inline const std::string& Blob::lz4_data() const {
  // @@protoc_insertion_point(field_get:Blob.lz4_data)
  return _internal_lz4_data();
}
inline void Blob::set_lz4_data(const std::string& value) {
  _internal_set_lz4_data(value);
  // @@protoc_insertion_point(field_set:Blob.lz4_data)
}
inline std::string* Blob::mutable_lz4_data() {
  // @@protoc_insertion_point(field_mutable:Blob.lz4_data)
  return _internal_mutable_lz4_data();
}
inline const std::string& Blob::_internal_lz4_data() const {
  if (_internal_has_lz4_data()) {
    return data_.lz4_data_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Blob::_internal_set_lz4_data(const std::string& value) {
  if (!_internal_has_lz4_data()) {
    clear_data();
    set_has_lz4_data();
    data_.lz4_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.lz4_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Blob::set_lz4_data(std::string&& value) {
  // @@protoc_insertion_point(field_set:Blob.lz4_data)
  if (!_internal_has_lz4_data()) {
    clear_data();
    set_has_lz4_data();
    data_.lz4_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.lz4_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Blob.lz4_data)
}
inline void Blob::set_lz4_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_lz4_data()) {
    clear_data();
    set_has_lz4_data();
    data_.lz4_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.lz4_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Blob.lz4_data)
}
inline void Blob::set_lz4_data(const void* value,
                             size_t size) {
  if (!_internal_has_lz4_data()) {
    clear_data();
    set_has_lz4_data();
    data_.lz4_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.lz4_data_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:Blob.lz4_data)
}
inline std::string* Blob::_internal_mutable_lz4_data() {
  if (!_internal_has_lz4_data()) {
    clear_data();
    set_has_lz4_data();
    data_.lz4_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.lz4_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Blob::release_lz4_data() {
  // @@protoc_insertion_point(field_release:Blob.lz4_data)
  if (_internal_has_lz4_data()) {
    clear_has_data();
    return data_.lz4_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Blob::set_allocated_lz4_data(std::string* lz4_data) {
  if (has_data()) {
    clear_data();
  }
  if (lz4_data != nullptr) {
    set_has_lz4_data();
    data_.lz4_data_.UnsafeSetDefault(lz4_data);
  }
  // @@protoc_insertion_point(field_set_allocated:Blob.lz4_data)
}
inline std::string* Blob::unsafe_arena_release_lz4_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Blob.lz4_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_lz4_data()) {
    clear_has_data();
    return data_.lz4_data_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Blob::unsafe_arena_set_allocated_lz4_data(std::string* lz4_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_lz4_data()) {
    data_.lz4_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (lz4_data) {
    set_has_lz4_data();
    data_.lz4_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lz4_data, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Blob.lz4_data)
}

// bytes zstd_data = 7;
inline bool Blob::_internal_has_zstd_data() const {
  return data_case() == kZstdData;
}
inline bool Blob::has_zstd_data() const {
  return _internal_has_zstd_data();
}
inline void Blob::set_has_zstd_data() {
  _oneof_case_[0] = kZstdData;
}
inline void Blob::clear_zstd_data() {
  if (_internal_has_zstd_data()) {
    data_.zstd_data_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_data();
  }
}
inline const std::string& Blob::zstd_data() const {
  // @@protoc_insertion_point(field_get:Blob.zstd_data)
  return _internal_zstd_data();
}
inline void Blob::set_zstd_data(const std::string& value) {
  _internal_set_zstd_data(value);
  // @@protoc_insertion_point(field_set:Blob.zstd_data)
}
inline std::string* Blob::mutable_zstd_data() {
  // @@protoc_insertion_point(field_mutable:Blob.zstd_data)
  return _internal_mutable_zstd_data();
}
inline const std::string& Blob::_internal_zstd_data() const {
  if (_internal_has_zstd_data()) {
    return data_.zstd_data_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Blob::_internal_set_zstd_data(const std::string& value) {
  if (!_internal_has_zstd_data()) {
    clear_data();
    set_has_zstd_data();
    data_.zstd_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.zstd_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Blob::set_zstd_data(std::string&& value) {
  // @@protoc_insertion_point(field_set:Blob.zstd_data)
  if (!_internal_has_zstd_data()) {
    clear_data();
    set_has_zstd_data();
    data_.zstd_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.zstd_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Blob.zstd_data)
}
inline void Blob::set_zstd_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_zstd_data()) {
    clear_data();
    set_has_zstd_data();
    data_.zstd_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.zstd_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Blob.zstd_data)
}
inline void Blob::set_zstd_data(const void* value,
                             size_t size) {
  if (!_internal_has_zstd_data()) {
    clear_data();
    set_has_zstd_data();
    data_.zstd_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.zstd_data_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:Blob.zstd_data)
}
inline std::string* Blob::_internal_mutable_zstd_data() {
  if (!_internal_has_zstd_data()) {
    clear_data();
    set_has_zstd_data();
    data_.zstd_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.zstd_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Blob::release_zstd_data() {
  // @@protoc_insertion_point(field_release:Blob.zstd_data)
  if (_internal_has_zstd_data()) {
    clear_has_data();
    return data_.zstd_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Blob::set_allocated_zstd_data(std::string* zstd_data) {
  if (has_data()) {
    clear_data();
  }
  if (zstd_data != nullptr) {
    set_has_zstd_data();
    data_.zstd_data_.UnsafeSetDefault(zstd_data);
  }
  // @@protoc_insertion_point(field_set_allocated:Blob.zstd_data)
}
inline std::string* Blob::unsafe_arena_release_zstd_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Blob.zstd_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_zstd_data()) {
    clear_has_data();
    return data_.zstd_data_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Blob::unsafe_arena_set_allocated_zstd_data(std::string* zstd_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_zstd_data()) {
    data_.zstd_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (zstd_data) {
    set_has_zstd_data();
    data_.zstd_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zstd_data, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Blob.zstd_data)
}

inline bool Blob::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Blob::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Blob::DataCase Blob::data_case() const {
  return Blob::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fileFormat_2eproto
